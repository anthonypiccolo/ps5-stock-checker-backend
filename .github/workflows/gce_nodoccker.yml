# Copyright 2020 Google, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Build and Deploy to Google Compute Engine without Docker

on:
  push:
    branches:
    - main
    - test-undetected-chrome

env:
  PROJECT_ID: ${{ secrets.GCE_PROJECT }}
  GCE_INSTANCE: gce-githubactions-nodocker-vm  # TODO: update to instance name
  GCE_INSTANCE_ZONE: us-west1-a    # TODO: update to instance zone
  PROXY_CREDS: ${{ secrets.PROXY_CREDS }}

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-18.04
    #was  ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.GCE_SA_KEY }}
        project_id: ${{ secrets.GCE_PROJECT }}

    - name: Deploy
      run: |-
        gcloud compute instances create "$GCE_INSTANCE" \
        --zone "$GCE_INSTANCE_ZONE" \
        --machine-type "e2-micro" \
        --image=ubuntu-2110-impish-v20211014 \
        --image-project=ubuntu-os-cloud \
        --maintenance-policy=MIGRATE \
        --scopes=https://www.googleapis.com/auth/datastore,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/trace.append,https://www.googleapis.com/auth/devstorage.write_only \
        --metadata=PROXY_CREDS="$PROXY_CREDS"
        --metadata=startup-script='#! /bin/bash
        # use this for deploying to a vanilla VM without docker

        #####################
        ### initial setup ###
        #####################

        #lets run this on an ubuntu 18.04 instance because python is already installed 

        ##export the environment variables
        export PROXY_CREDS=$PROXY_CREDS

        # Updating apt to see and install Google Chrome
        apt-get -y update

        # installing git, python, pip
        apt-get install -y git
        python3 --version
        apt install -y python3-pip
        apt install wget
        # apt-get install -y python3.8 #already installed on ubuntu 18.04


        # Adding trusting keys to apt for repositories - needed for chrome install
        wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - 

        #########

        # # install manually all the missing libraries
        # apt-get install -y gconf-service libasound2 libatk1.0-0 libcairo2 libcups2 libfontconfig1 libgdk-pixbuf2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libxss1 fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils

        # # install chrome
        # wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        # dpkg -i google-chrome-stable_current_amd64.deb; apt-get -fy install

        #########

        # Adding Google Chrome to the repositories
        sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'

        # Install Cron so we can set up a cron job
        apt-get install -y cron

        # Magic happens
        # apt-get install -y google-chrome-stable #does not work
        apt-get install -y chromium-browser #=90.0.4430.72-0ubuntu0.18.04.1 #does work


        # Installing Unzip
        # RUN apt-get install -yqq unzip
        apt-get install -yqq unzip curl


        # Download the Chrome Driver - this isn't working
        # wget -O /tmp/chromedriver.zip http://chromedriver.storage.googleapis.com/`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE`/chromedriver_linux64.zip
        wget -O /tmp/chromedriver.zip http://chromedriver.storage.googleapis.com/`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE_94`/chromedriver_linux64.zip
        #LATEST_RELEASE_92 - https://chromedriver.storage.googleapis.com/index.html?path=92.0.4515.107/
        unzip /tmp/chromedriver.zip chromedriver -d /usr/local/bin/

        # Set display port as an environment variable
        # ENV DISPLAY=:99

        #####################
        ### app install ###
        #####################
        mkdir /app

        #clone into /app

        git clone https://github.com/anthonypiccolo/ps5-stock-checker-backend /app
        # git clone --branch VM_cloudcompute https://github.com/anthonypiccolo/ps5-stock-checker-backend/tree/VM_cloudcompute /app

        apt install -y python3-pip

        pip3 install --upgrade pip
        pip3 install --ignore-installed -r /app/requirements.txt



        ######
        ### Setup Cron job ###
        #####


        #create the cron job to run every minute
        # crontab -l | { cat; echo "* * * * * python3 /app/main.py"; } | crontab -
        chmod +x /app/cron_execute.sh
        #every minute
        # crontab -l | { cat; echo "* * * * * /app/cron_execute.sh >> /app/out.txt  2>&1"; } | crontab -
        #every 2nd minute between 8am-7pm
        crontab -l | { cat; echo "*/2 * * * * /app/cron_execute.sh >> /app/out.txt  2>&1"; } | crontab -


        #start the service 
        service cron start


        echo "setup complete. Launched scraper" >> /completed.txt
        grep -m 1 “startup-script exit status” /var/log/syslog'


      # --metadata-from-file startup-script=bootscript.sh \ #this was the file but had issues pulling vars in

      # --service-account=xxxxxxx@developer.gserviceaccount.com \



        

      # gcloud compute instances update-container "$GCE_INSTANCE" \
      # --zone "$GCE_INSTANCE_ZONE" \
      # --container-image "gcr.io/$PROJECT_ID/$GCE_INSTANCE-image:$GITHUB_SHA"


  #  gcloud compute instances create-with-container "$GCE_INSTANCE" \
  #  --zone "$GCE_INSTANCE_ZONE" \
  # --machine-type "e2-micro" \
  # --container-image "gcr.io/$PROJECT_ID/$GCE_INSTANCE-image:$GITHUB_SHA"


#   Message: unknown error: cannot find Chrome binary
#   (Driver info: chromedriver=93.0.4577.63 (ff5c0da2ec0adeaed5550e6c7e98417dac77d98a-refs/branch-heads/4577@{#1135})
# ,platform=Linux 5.4.0-1051-gcp x86_64)